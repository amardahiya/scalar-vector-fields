======= Plotting of scalar and vector fields =======

Visualization of two-dimensional scalar and vector fields will here
be done by using three different
packages: Matplotlib, SciTools, and Mayavi. The latter contains
support for doing more advanced plotting operations in three
dimensions.  The three packages are different in many respects, but
they also have much in common, as code below shows.  Note that (for
most backends one can plug into Matplotlib, SciTools, and Mayavi) one
can rotate a figure by holding the mouse cursor down. This
functionality is often useful in order to get a better view of a
three-dimensional plot. 
The commands `figure()` and `savefig()` are common for the plotting packages we consider. 
In calls on the form `figure(num)` the parameter identifies the plot we work with, 
and in calls on the form `savefig(filename)` the parameter identifies a file.

For Ubuntu,
Section ref{sec:accesspy:vmware} describes installation of all the software
needed for plotting with the mentioned packages.
For Python programming on Mac OSX and Windows, we recommend using Anaconda. To obtain an environment for this, download the file `inf11003dplot.txt` from the bookâ€™s webpage,
and then create a conda environment named `inf11003dplot` with contents described in this file. This can be done by writing

!bc sys
conda create --name inf11003dplot --file inf11003dplot.txt
!ec
Then one has to activate the environment. The syntax for this depends on the platform:

!bc sys
source activate inf11003dplot # Mac OSX platforms
activate inf11003dplot        # Windows platforms
!ec

Our pedagogical example consists of plotting a scalar function in different ways.
We will flat create contour plots as well as an elevated three-dimensional
surface, and also plot the latter together with a parametrized curve lying
on the surface. To illustrate plotting of
vector fields, we simply plot the gradient of the scalar field, but will
also illustrate two- and a three-dimensional vector fields
unrelated to a surface.
Before we start, let us be clear on how variable names have bene chosen.

* We have used names such as `x`, `y`, `z` for one-dimensional coordinates.
* We have used names such as `xv`, `yv`, `zv` for vectorized coordinates in a higher dimensional grid.
* For vector fields, we use names such as `u`, `v`, `w` for vectors at points corresponding to `xv`, `yv`, `zv`.

Below are more mathematical details on the various scalar and vector fields
we aim to plot. The figures we show first are generated with Matplotlib. 
The succeeding sections explain the corresponding code, 
and how the same plots can be made with the other plotting packages. 

===== Surface plots =====

We consider the surface defined by

!bt
\begin{equation}
h(x,y) = \frac{h_0}{1+ \frac{x^2+y^2}{R^2}},
label{heq}
\end{equation}
!et
$h(x,y)$ may model the height of an isolated circular mountain, $h$ being the height above sea level, while $x$ and $y$ are Cartesian coordinates, $h_0$ is the height at the top of the mountain, and $R$ what is the radius of the mountain.
Since mountains are actually quite flat (or more precisely,
their heights are small compared to the horizontal extent), we use
meter as length unit for vertical distances ($z$ direction) and km as length
unit for horizontal distances ($x$ and $y$ coordinates).
Prior to all code below we have initialized $h_0$ and $R$ with
the following values:

@@@CODE plot3d_matplotlib.py fromto: h0 =@#endinitvalues

===== Grid for two-dimensional fields =====

Before we can plot $h(x,y)$, we need to create a rectangular grid in the $xy$ plane with all the points used for plotting. Regardless of which plotting package we will use later on, the grid can be created as follows:

@@@CODE plot3d_matplotlib.py fromto: # Grid for x, y@# endinitgrid
The grid is based on equally spaced coordinates `x` and `y` in the
interval $[-10,10]$ km.
Note the mysterious extra parameters to `meshgrid` here, which are needed in order for the coordinates to have the right order in mathematics.

A surface plot of a two-dimensional scalar field $h(x,y)$ is a visualization of the surface $z=h(x,y)$ in three-dimensional space.
Most plotting packages have functions called `mesh` and `surf`, which both can be used to create surface plots. 
`mesh` only colors the lines connecting the grid points, producing what is also called a *wireframe plot*.
`surf` on the other hand also colors the faces of the surface.
In Figure ref{plotmatplotlib} we have shown two plots of the surface $h(x,y)$. Section ref{matplotlibsurfaceplots} presents the code which generates these plots.

FIGURE:[fig/plot_matplotlib] Two different plots of a mountain. The right plot also shows a trajectory to the top of the mountain. label{plotmatplotlib}

===== Parametrized curve =====

To illustrate the plotting of three-dimensional parameterized curves,
we consider a trajectory that represents a circular climb to the top
of the mountain:

!bt
\begin{equation}
\bm{r}(t) = \left( 10\left(1 - \frac{t}{2\pi}\right)\cos(t) \right) \bm{i} + \left( 10\left(1 - \frac{t}{2\pi}\right)\sin(t) \right) \bm{j} + \frac{h_0}{1 + \frac{100(1 - t/(2\pi))^2}{R^2}} \bm{k}. label{req}
\end{equation}
!et
Here $\bm{i}$, $\bm{j}$, and $\bm{k}$ denote the unit vectors in the $x$-, $y$-, and $z$-directions, respectively.
The coordinates of this parametrized curve $\bm{r}(t)$ can be produced by

@@@CODE plot3d_matplotlib.py fromto: s = np.linspace@# endparamcurve
The parametric curve is shown together with the surface $h(x,y)$ in the right plot in Figure ref{plotmatplotlib}.


===== Contour lines =====

Contour lines are lines defined by the implicit equation $h(x,y)=C$, where
$C$ is some constant representing the contour level.
Different contour lines arise by the contour level.
Very often, we let $C$ run over some equally spaced values, and the
plotting program computes relevant $C$ values. 
Contour lines can be instructive both in 2D and 3D. Figure ref{simplecontourmatplotlib} shows contour lines in 2D and 3D for 
our surface $h(x,y)$. The code used to generate these plots will be gone through in Section ref{matplotlibcontourplots}.

FIGURE:[fig/simple_contour_matplotlib, height=400 width=600 frac=0.8]  Default two- and three-dimensional contour plots. label{simplecontourmatplotlib}

===== The gradient vector field =====
label{sec:gradientvectorfield}

The *gradient vector field* $\nabla h$ of $h(x,y)$ is defined as

!bt
\begin{equation}
\nabla h = \frac{\partial h}{\partial x}\bm{i} +  \frac{\partial h}{\partial y}\bm{j}.
label{gradienteq}
\end{equation}
!et
One learns in vector calculus that the gradient points in the direction where $h$ increases most, and 
that the gradients are orthogonal to the contour lines.
This is something we can easily illustrate in our plots when when we combine the
contour plot with a plot of the gradient vector field.

When we plot the gradient vector field, it is useful to make a grid of coordinates with a smaller resolution that what we use for the surface coordinates.
The reason is that an arrow is drawn at each point in the grid, and
if the resolution is too high, the arrows will collide and result in
a cluttered plot that is difficult to interpret.
So, let us use a grid with 20 instead of 40 intervals in the horizontal
directions:

@@@CODE plot3d_matplotlib.py fromto: # Define a coarser grid for the vector field@# endcoarsergrid
The gradient vector field of $h(x,y)$ can now be computed using the function `np.gradient`:

@@@CODE plot3d_matplotlib.py fromto: dhdx, dhdy@# endgradient
The gradient field (ref{gradienteq}) appears in Figure ref{quivermatplotlib}.
Section ref{matplotlibquiverplots} explains the code needed to make these
plots.

FIGURE:[fig/quiver_matplotlib, width=600 frac=0.8] Gradient field with contour plot (left). 2D vector field (right). label{quivermatplotlib}

By setting the third component to zero, and place the vectors at the surface, we can also plot the gradient field in three dimensions. 
In figure ref{quivercontoursurfmatplotlib} we have done this, and added contours and the surface itself to the plot. 
We reversed the gradient when plotting together with the surface, so that the surface does not hide the gradients.
Again the code can be found in Section ref{matplotlibquiverplots}. 

FIGURE:[fig/quiver_contour_surf_matplotlib, height=400 width=600 frac=0.8] The gradient field plotted in three dimensions in different ways. With the contours (left) and with the surface (right). label{quivercontoursurfmatplotlib}








=== A two-dimensional vector field ===
label{sec:twodimvectorfield}

Another vector field to be used in examples is defined by

!bt
\begin{equation}
\bm{v}(x,y) = \left( x^2 + 2y - \frac{1}{2} xy\right)\bm{i}   - 3y\bm{j}.
label{2dvectorfieldeq}
\end{equation}
!et
We shall plot this field on a grid where the coordinates run over $[-5,5]$.
The chosen resolution gives a distance $0.5$ between the grid points where
the vector arrows are drawn. The grid and the evaluation of the vector field
on the grid are computed by

@@@CODE plot3d_matplotlib.py fromto: # Grid two-dimensional vector field@# endtwodimfield
The two-dimensional vector field (ref{2dvectorfieldeq}) is illustrated
in the right part of Figure ref{quivermatplotlib}.



=== A three-dimensional vector field ===
label{sec:threedimvectorfield}

As an example of a three-dimensional vector field we consider a gravitational field.
Newtons law of gravitation says that the gravitational force is proportional to

!bt
\begin{equation}
\bm{v}(x, y, z) = -\bm{r}/|\bm{r}|^3 = -\frac{1}{\sqrt{x^2+y^2+z^2}^3}( x\bm{i} + y\bm{j} + z\bm{k}), label{3dvectorfieldeq}
\end{equation}
!et
where $\bm{r}=(x,y,z)$ is the position vector. In this case, we need a
three-dimensional grid for plotting, here defined by coordinates
$[0.5, 2]$ along each axis with only 7 intervals to avoid too dense arrows:

@@@CODE plot3d_matplotlib.py fromto: # Grid three-dimensional vector field@# endthreedimfield
The cube of the distance (`r3`) has here been computed once, since all three components are divided by this quantity.
Figure ref{quivermatplotlibgr} displays this vector field,
and the necessary code is explained in Section ref{matplotlibquiverplots}.

FIGURE:[fig/quiver_matplotlib_gr, height=400 width=600 frac=0.8] A three-dimensional gravitational force field. label{quivermatplotlibgr}

[hpl: Together with a 3D vector example with Mayavi,
this is the only example on 3D field. Looks strange to talk about
3D vector fields without 3D scalar fields, but 3D scalar fields is
a comprehensive topic. Should we drop 3D? Or should we add some basic
3D Mayavi for scalar fields? In general, I find ``plotting in three
dimensions'' somewhat confusing since contours are usually in 2D, while
lifted surfaces are 3D, but the common feature is that a 2D field is
visualized. I like better to talk about 2D fields and then different
techniques in 2D and 3D for visualizing such fields.]


======= Matplotlib =======

We import any visualization package under the name `plt`, so
for Matplotlib, the import is done by

!bc pycod
import matplotlib.pyplot as plt
!ec
Note that a `plt.show()` command is necessary to force Matplotlib to show a plot on the screen. When creating two-dimensional plots of
scalar and vector fields, we shall make use
of a Matplotlib ``axes'' object, called `ax` and made by

!bc pycod
fig = plt.figure(1)
ax = fig.gca()
!ec
For three-dimensional visualization, we need the following alternative
lines:

!bc pycod
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure(1)
ax = fig.gca(projection='3d')
!ec




===== Simple surface plots =====
label{matplotlibsurfaceplots}

The Matplotlib equivalents for `mesh` and `surf` are `ax.plot_wireframe` and `ax.plot_surface`. 
The following code uses these commands to produce the plots shown in Figure ref{plotmatplotlib}.

@@@CODE plot3d_matplotlib.py fromto:# Simple plot of mountain@# endsimpleplots
Note that the second plot in this figure was drawn using a finer grid of colors. This was controlled 
using the `rstride` and  `cstride`parameters. The two plots illustrate the effect of giving these smaller values. 

A surface with colors reflecting the height of the surface (i.e., the value
of the scalar field) needs specification of a *color map*, i.e.,
what type of colors to be used. Above we applied the common `coolwarm`
scheme which goes from blue (``cool'' color for minimum values) to
red (``warm'' color for maximum values), as well as another scheme called `Spectral`.
There are lots of colormaps to choose from.

To the latter plot we also added the parameterized curve $\bm{r}(t)$, defined by (ref{req}), using the command `plot`.
The attribute `linewidth` was increased here in order to make the curve more visible.
By default, Matplotlib adds plots to each other without any need
for `plt.hold('on')`.  



===== Contour plots =====
label{matplotlibcontourplots}

The following code exemplifies how one can create different types of contour plots.

@@@CODE plot3d_matplotlib.py fromto: # Default two-dimensional contour plot@#end contourplots

The first two plots (default two-dimensional and three-dimensional contour plots) were shown in Figure ref{simplecontourmatplotlib}. The next 4 plots are shown in Figure ref{advancedcontourmatplotlib}.

FIGURE:[fig/advanced_contour_matplotlib, height=400 width=600 frac=0.8] Some other contour plots with Matplotlib: 10 contour lines (upper left), 10 black contour lines (upper right), specified contour levels (lower left), and labeled levels (lower right). label{advancedcontourmatplotlib}





===== Vector field plots =====
label{matplotlibquiverplots}

The code for plotting the gradient field (ref{gradienteq}) together with contours is as follows, 
once the grid has been defined as in Section ref{sec:gradientvectorfield}.

@@@CODE plot3d_matplotlib.py fromto:# Draw contours and gradient field of h in 2D@# end draw contours and gradient field of h in 2D
With grid coordinates defined as in Section ref{sec:twodimvectorfield},
the two-dimensional vector field (ref{2dvectorfieldeq}) can be plotted as follows.

@@@CODE plot3d_matplotlib.py fromto:# Draw 2D-field@# end draw 2D-field
The following code plots the gradient field together with the contours of $h$ in 3D. 

@@@CODE plot3d_matplotlib.py fromto:# Draw contours and gradient field of h in 3D@# end draw contours and gradient field of h in 3D
If we replace contours with the surface itself, and reverse the gradient vectors, we can use the following code. 

@@@CODE plot3d_matplotlib.py fromto:# Draw surface and negative gradient field of h@# end draw surface and negative gradient field of h
The corresponding plots were shown in Figure ref{quivercontoursurfmatplotlib}.









Finally the three-dimensional vector field (ref{3dvectorfieldeq}) can be plotted as follows, 
with the grid defined as in Section ref{sec:threedimvectorfield}.

@@@CODE plot3d_matplotlib.py fromto:# Draw 3D-field@# end draw 3D-field
The first two plots are shown in Figure ref{quivermatplotlib}, and the third in Figure ref{quivermatplotlibgr}.

A challenge in plots of vector fields is to get the right arrow lengths such
that the arrows are well visible, but they do not collide and make a
cluttered visual impression. Since the arrows are drawn at each point in
the 2D grid, one way of controlling the number of arrows is to control
the resolution of the grid. 
One can also manually set the length of the arrows. We did this for the 3D-field only.




======= SciTools =======

SciTools can work with different plotting engines (backends).
Usually, we employ Matplotlib
in the forthcoming figures, but sometimes Gunplot is required to realize
a certain feature. Below we will use the prefix `plt` for the package `scitools.easyviz`:

!bc pycod
import scitools.easyviz as plt
!ec


===== Simple surface plots =====

To make the grid, one can either use `meshgrid` as shown above or
`plt.ndgrid` which requires fewer peculiar parameters:

!bc pycod
xv, yv = plt.ndgrid(x, y)       # Grid for contour plot
x2v, y2v = plt.ndgrid(x2, y2)   # Coarser grid for quiver plot
!ec

Simple surface plots of $h(x,y)$ in (ref{heq}) (coloured together with the parametric curve $\bm{r}(t)$ in (ref{req})) can be produced with `mesh` and `surf` as follows.

[hpl: This is confusing: What does Gnuplot backend as comment mean? The thing is that `mesh` and `surf` are not supported by the Matplotlib interface. Must explain what `mesh` and `surf` etc.]

[or: The matplotlib equivalents of mesh and surf are plotwireframe and plotsurface. Scitools should translate calls to mesh and surf to these for the matplotlib backend. Still this does not seem to work well with, so I use Gnuplot. Should fix with Johannes.
Also, I have not had much luck with the VTK backend]

[or: I changed backend to gnuplot for contour plots, but it seems then that I cannot set the colour of the labels anymore, see the plot. I think Scitools is simply not tested enough for 3D here]

@@@CODE plot3d_scitools_gnuplot.py fromto:# Simple plot of mountain@# endsimpleplots

The results are shown in Figure ref{plotscitools}. A Gnuplot backend was used here.

FIGURE:[fig/plot_scitools, height=400 width=600 frac=0.8] Two SciTools surface plots: `mesh` (left) and `surf` (right). The curve $\bm{r}(t)$ is also shown in the right plot. label{plotscitools}



===== Contour plots =====

[hpl: Try to avoid referring to the Matplotlib examples if possible. Just say what you want to plot and show code. Update comments in the code so that they are the same (if possible) for all plotting tools.]

The following code exemplifies how one can create different contour plots with SciTools. As is seen, there are only minor differences in how the parameters (colour, levels, labeling) to the plot are set.

@@@CODE plot3d_scitools_gnuplot.py fromto: # Default two-dimensional contour plot@#end contourplots

The first two plots (default two-dimensional and three-dimensional contour plots) are shown in Figure ref{simplecontourscitools}. The next 4 plots are shown in Figure ref{advancedcontourscitools}.

FIGURE:[fig/simple_contour_scitools, height=400 width=600 frac=0.8]  Default two- and three-dimensional contour plots with SciTools. label{simplecontourscitools}

FIGURE:[fig/advanced_contour_scitools, height=400 width=600 frac=0.8] Some other contour plots with SciTools: With 10 contour lines (upper left), with 10 contour lines in black (upper right), with specified levels (lower left), and with labeled levels (lower right). label{advancedcontourscitools}



===== Vector field plots =====

There is limited support for plotting three-dimensional vector fields in SciTools (the function is called `contour3`), so the following code only concerns the gradient field (ref{gradienteq}) and the two-dimensional vector field (ref{2dvectorfieldeq}).
The code for plotting the gradient field together with contours is as follows.

@@@CODE plot3d_scitools.py fromto:# Draw contours and gradient field of h@# end draw contours and gradient field of h
The two-dimensional vector field (ref{2dvectorfieldeq}) can be plotted as follows.

@@@CODE plot3d_scitools.py fromto:# Draw 2D-field@# end draw 2D-field.
The results are shown in Figure ref{quiverscitools}.

FIGURE:[fig/quiver_scitools, height=400 width=600 frac=0.8] Vector field plots with SciTools. Gradient field with contour plot (left). 2D vector field (right). label{quiverscitools}


======= Mayavi =======

Mayavi[^mayaviurl] is an advanced, free, easy to use, scientific data visualizer, with an emphasis on 3D graphics.
The package is written in Python, and uses the Visualization Toolkit (VTK) in C++ for rendering graphics. Since VTK can be configured with different backends, so can Mayavi.
Mayavi is cross platform and runs on most platforms, including Mac OSX, Windows, Linux.

[^mayaviurl]: The page URL: "http://docs.enthought.com/mayavi/mayavi/" collects pointers to all relevant documentation of Mayavi.

The `mayavi.mlab` module provides a simple interface to plotting of 2D
scalar and vector fields with commands that mimic those of Matlab.
Let us import this module under our usual name `plt` for a plotting package:

!bc pycod
import mayavi.mlab as plt
!ec

The official documentation of the `mlab` module is provided in two places, one for
the "basic functionality": "http://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html" and one for "further functionality":
"http://docs.enthought.com/mayavi/mayavi/auto/mlab_other_functions.html".
Basic "figure handling":"http://docs.enthought.com/mayavi/mayavi/auto/mlab_figure.html" is very similar as the one we know from Matplotlib and SciTools.
Just as for Matplotlib, plotting commands you do in `mlab` will go into the same figure, until you manually change to a new figure.


===== Simple surface plots =====

Mayavi has functions `mesh` and `surf` for making simple surface plots, which are very similar in appearance. 
Contrary to most other plotting packages, Mayavi's `mesh` does color the face of the surface. 
The following code uses these to plot the surface $h(x,y)$ in Equation (ref{heq}), as well as the parametric curve $\bm{r}(t)$ in Equation (ref{req}).

@@@CODE plot3d_mayavi.py fromto:# Simple plot of mountain@# endsimpleplots

The calls to `plt.figure()` took three parameters: First the usual index for the plot, then two tuples of numbers , representing the RGB-values to be used for the foreground (`fgcolor`) and the background (`bgcolor`). 
White and black are  (1,1,1) and (0,0,0), respectively. The foreground color is used for text and labels included in the plot. 

The `color` attribute adjusts the surface so that it is coloured with small variations from the provided base-color. 
Note also the extra parameter `extent`.
Mayavi does no auto-scaling of the axes per default (contrary to SciTools and Matplotlib),
so if the magnitudes in the vertical and horizontal directions are very different (as they are for $h(x,y)$), the plots may be very concentrated in one direction.
`extent` ensures that the axes are auto-scaled to fit the contents of the surface.
We will return to what the six values listed in `extent` mean when we have
a more illustrating example.

The command `plot3d` was used to plot the curve $\bm{r}(t)$. 
The attribute `tube_radius` was increased here in order to make the curve more visible.

Figure ref{plotmayavi} shows the resulting plots.
Rather unexpectedly we see that $\bm{r}(t)$ does not lie on the surface anymore.
The reason is that the ranges of the $x$-, $y$-, and $z$-values differ for the curve and the surface, 
so that autoscaling will use different scales when placing them on the scene.
We therefore have to be a bit cautious when applying the autoscaling in Mayavi, 
and in the following contour plots we will avoid this autoscaling problem by scaling everything
first so that the coordinates already are of comparable magnitude.

FIGURE:[fig/plot_mayavi] Two Mayavi surface plots: `mesh` (left) and `surf` (right). The curve $\bm{r}(t)$ is also shown in the right plot. label{plotmayavi}



===== Subplots =====

The two plots in Figure ref{plotmayavi} were created as separate figures. One can also create them as subplots within one figure as follows.

@@@CODE plot3d_mayavi.py fromto:# Create one figure with three subplots@# endsubplot
The result is shown in Figure ref{subplot}. 
From the code it is clear that the six values listed in `extent` represent fractions of the cube `(0,1,0,1,0,1)`, where the corresponding plots are placed.
The extents for the three plots are defined so that they do not overlap.
Three separate `mesh` commands are run, each producing a new plot in the current figure.
The commands use different values for the `colormap` attribute to color the surface in different ways.
The two latter plot handles are sent as input to the `plt.outline` command, which produces the frames we see in the figure. 
We see that the last plot has a frame with a different color. This is due to the `color`-attribute, which was added in the last call to `plt.outline`. 

FIGURE:[fig/subplot] A plot with three subplots created with Mayavi. label{subplot}



===== Contour plots =====

The following code exemplifies how one can produce contour plots  with Mayavi. 
The code is very similar to the code for previous contour plots. One difference is that the attribute `contours` now can represent the number of levels, 
as well as the levels themselves:

@@@CODE plot3d_mayavi.py fromto:# Default contour plot plotted together with surf@#end contourplots
There seems to be no function in Mayavi which labels the contours, as we did with Matplotlib and ScitTools.
The plots are shown in Figure ref{advancedcontourmayavi}. Contour plots in Mayavi are shown in 3D, contrary to Matplotlib and SciTools, but you can rotate and look at them from above. 
Their visual appearance may be enhanced by also including the surface plot itself. We have here done this for two of the contour plots.
There is a clear difference in visual impression between the two. In the first one default surface- and contour coloring was used, resulting in less visible contours. 
As we see, the contours are more visible when a black color is used.

FIGURE:[fig/advanced_contour_mayavi, height=400 width=600 frac=0.8] Some contour plots with Mayavi: Default contour plot (upper left), with 10 contour lines (upper right), with 10 contour lines in black (lower left), and with specified levels (lower right). label{advancedcontourmayavi}



===== Vector field plots =====

Mayavis functionality for plotting vector fields is primarily intended for 3D also, so we will not plot the two-dimensional field (ref{2dvectorfieldeq}).
The following code plots the gradient field together with the contours of $h$ in 3D. 

@@@CODE plot3d_mayavi.py fromto:# Draw contours and gradient field of h@# end draw contours and gradient field of h
The color of the vectors were here set to red, and the attribute `scale_factor` adjusted so that vectors do not collide. 
Still the plot look a bit cluttered. If we replace contours with the surface itself, 
and reverse the gradient vectors, we can use the following code. 

@@@CODE plot3d_mayavi.py fromto:# Draw surface and negative gradient field of h@# end draw surface and negative gradient field of h
The corresponding plots are shown in Figure ref{quivercontoursurfmayavi}.

FIGURE:[fig/quiver_contour_surf_mayavi, height=400 width=600 frac=0.8] The gradient field plotted in three dimensions in different ways. With the contours (left) and with the surface (right). label{quivercontoursurfmayavi}

The three-dimensional vector field (ref{3dvectorfieldeq}) can be plotted as follows.

@@@CODE plot3d_mayavi.py fromto:# Draw 3D-field@# end draw 3D-field
The resulting plot is shown in Figure ref{quivermayavi}. This shows some of the challenges in plotting three-dimensional vector fields.
[hpl: I don't think we should show this inferior figure unless we have some remedy to make it clearer... Visualization of 3D vector fields is challenging.]
It may be challenging to create instructive plots, since vectors are drawn over an area in 3D rather than 2D.

FIGURE:[fig/quiver_mayavi, height=400 width=600 frac=0.8] The three-dimensional vector field plotted with Mayavi. label{quivermayavi}

===== Animations =====

[hpl: Emphasize saving figures to file for making videos.]

We have previously seen how to produce animations with Matplotlib and SciTools.
With the function `animate` in `mlab` we can also create animations.



This code will rotate the camera continuously. f is the current graphics.

!bc pycod
import mayavi as plt
@mlab.animate
def anim():
    f = plt.gcf()
    while 1:
        f.scene.camera.azimuth(10)
        f.scene.render()
        plt.yield

a = anim()
!ec